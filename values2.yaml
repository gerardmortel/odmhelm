# Default values for odmcharts.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Accept the terms of the IBM license by setting the license parameter to "true"
license: true

# Users password is required if authSecretRef is not set.
# Set the password for odm default users.
usersPassword: "odmpwd"

image:
  repository: "cp.icr.io/cp/cp4a/odm"
  tag: 8.12.0.0-IF007
  pullPolicy: IfNotPresent
## Optionally specify an list of imagePullSecrets.
## Secrets must be manually created in the namespace.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  pullSecrets: [ibm-entitlement-key]
  # - admin.registrykey
  # - admin.registrykey

## Architecture - e.g. amd64, ppc64le. If left empty, the architecture will be determined automatically.
## You can use kubectl version command to determine the architecture on the desired worker node.
  arch: "amd64"

serviceAccountName: ""

service:
  enableTLS: true
  type: NodePort
  enableRoute: true
  hostname: ""
  ingress:
    enabled: false
    annotations:
    tlsHosts: []
    tlsSecretRef:
    host:

decisionServerRuntime:
  enabled: true
  tagOrDigest:
  replicaCount: 1
  loggingRef:
  jvmOptionsRef:
  xuConfigRef:
  webConfigRef:
  extendRoleMapping: false
  enableTLSAuth:
  customScriptsRef:
  initContainer:
    image:
    command:
    configRef:
    configOidcRef:
    resources:
      requests:
        cpu: 200m
        memory: 100Mi
      limits:
        cpu: 500m
        memory: 200Mi
    existingClaimName:
    env:
  contextRoot:
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
      ephemeral-storage: 200Mi
    limits:
      cpu: 2
      memory: 4096Mi
      ephemeral-storage: 1G
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 3
    targetAverageUtilization: 75
  nodeAffinity:
  labels: {}
  networkPolicy:
    egress:
    ingress:

decisionServerConsole:
  tagOrDigest:
  loggingRef:
  jvmOptionsRef:
  extendRoleMapping: false
  title:
  description:
  customScriptsRef:
  runtime:
    webConfigRef:
  initContainer:
    image:
    command:
    configRef:
    configOidcRef:
    resources:
      requests:
        cpu: 200m
        memory: 100Mi
      limits:
        cpu: 500m
        memory: 200Mi
    existingClaimName:
    env:
  contextRoot:
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
      ephemeral-storage: 200Mi
    limits:
      cpu: 2
      memory: 1024Mi
      ephemeral-storage: 1G
  nodeAffinity:
  labels: {}
  networkPolicy:
    egress:
    ingress:

decisionCenter:
  enabled: true
  tagOrDigest:
  persistenceLocale: en_US
  replicaCount: 1
  customlibPvc: my-custom-dc-libs-pvc
  loggingRef:
  jvmOptionsRef:
  webConfigRef:
  extendRoleMapping: false
  disableAllAuthenticatedUser: false
  customScriptsRef:
  initContainer:
    image:
    command:
    configRef:
    configOidcRef:
    resources:
      requests:
        cpu: 200m
        memory: 100Mi
      limits:
        cpu: 500m
        memory: 200Mi
    existingClaimName:
    env:
  contextRoot:
  refererList:
  resources:
    requests:
      cpu: 500m
      memory: 1500Mi
      ephemeral-storage: 1G
    limits:
      cpu: 2
      memory: 4096Mi
      ephemeral-storage: 2G
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 3
    targetAverageUtilization: 75
  nodeAffinity:
  labels: {}
  networkPolicy:
    egress:
    ingress:

decisionRunner:
  enabled: true
  tagOrDigest:
  replicaCount: 1
  loggingRef:
  jvmOptionsRef:
  extendRoleMapping: false
  customScriptsRef:
  initContainer:
    image:
    command:
    configRef:
    configOidcRef:
    resources:
      requests:
        cpu: 200m
        memory: 100Mi
      limits:
        cpu: 500m
        memory: 200Mi
    existingClaimName:
    env:
  contextRoot:
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
      ephemeral-storage: 200Mi
    limits:
      cpu: 2
      memory: 4096Mi
      ephemeral-storage: 1G
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 3
    targetAverageUtilization: 75
  resURL:
  nodeAffinity:
  labels: {}
  networkPolicy:
    egress:
    ingress:

internalDatabase:
  databaseName: 
  tagOrDigest:
  user: # deprecated, please use secretCredentials
  password: # deprecated, please use secretCredentials
  secretCredentials: 
  populateSampleData: 
  persistence:
    enabled: true
    useDynamicProvisioning: true
    storageClassName: 
    resources:
      requests:
        storage: 
  resources:
    requests:
      cpu: 
      memory: 
      ephemeral-storage: 
    limits:
      cpu: 
      memory: 
      ephemeral-storage: 
  runAsUser:

externalDatabase:
  type: "db2"
  serverName: "c-db2ucluster-cp4ba-db2u.odmprodhelm1.svc.cluster.local"
  databaseName: "ODMDB"
  url: ""
  user: "" # deprecated, please use secretCredentials
  password: "" # deprecated, please use secretCredentials
  secretCredentials: "my-odm-db-secret"
  port: "50000"
  sslSecretRef:
  ## Optionally specify a list of driversUrl using --set externalDatabase.driversUrl="{url1,url2}" in cli
  driversUrl: []
  # - url1
  # - url2
  decisionServer:
    type: "db2"
    serverName: "c-db2ucluster-cp4ba-db2u.odmprodhelm1.svc.cluster.local"
    databaseName: "ODMDB"
    url: ""
    user: "" # deprecated, please use secretCredentials
    password: "" # deprecated, please use secretCredentials
    secretCredentials: "my-odm-db-secret"
    port: "50000"
    sslSecretRef:
    ## Optionally specify a list of driversUrl using --set externalDatabase.driversUrl="{url1,url2}" in cli
    driversUrl: []
    # - url1
    # - url2
  decisionCenter:
    type: "db2"
    serverName: "c-db2ucluster-cp4ba-db2u.odmprodhelm1.svc.cluster.local"
    databaseName: "ODMDB"
    url: ""
    user: "" # deprecated, please use secretCredentials
    password: "" # deprecated, please use secretCredentials
    secretCredentials: "my-odm-db-secret"
    port: "50000"
    sslSecretRef:
    ## Optionally specify a list of driversUrl using --set externalDatabase.driversUrl="{url1,url2}" in cli
    driversUrl: []
    # - url1
    # - url2
externalCustomDatabase:
  datasourceRef:
  driverPvc:

readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 5
  failureThreshold: 45
  timeoutSeconds: 5

livenessProbe:
  initialDelaySeconds: 300
  periodSeconds: 30
  failureThreshold: 4
  timeoutSeconds: 5

customization:
  readOnlyRootFilesystem: true
  vault: ""
  securitySecretRef:
  baiEmitterSecretRef:
  authSecretRef:
  dedicatedNodeLabel:
  runAsUser:
  kubeVersion: "ODM on K8s"
  productName:
  productID:
  productVersion:
  productSemVer:
  cloudpakID:
  cloudpakVersion:
  deployForProduction: true
  meteringServerUrl:
  meteringSendPeriod:
  usageMeteringSecretRef:
  trustedCertificateList:
  enableFips: false
  disableWSJavaAgent: false
  nodeAffinity:
  labels: {}
  seccompProfile:
    type:
    localhostProfile:
  enabledCiphers:
  customScriptsRef:

dba:
# if no rootCaSecretRef is defined then no keytoolinit init-container
  rootCaSecretRef:
  ldapSslSecretRef:
  passwordSecretRef:
  keytoolInitContainer:
    image:
    imagePullPolicy:
    imagePullSecret:

oidc:
  enabled: false
  serverUrl:
  registrationUrl:
  adminRef:
  redirectUrisRef:
  clientRef:
  provider:
  allowedDomains:
  disableLoginPanel:
  initContainer:
    image:
    command:
    configRef:
    resources:
      requests:
        cpu: 200m
        memory: 100Mi
      limits:
        cpu: 500m
        memory: 200Mi
    existingClaimName:
    env:

networkPolicy:
  # Enable creation of NetworkPolicy resources.
  enabled: true
  egress:
  ingress:
  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
  # For Kubernetes v1.7, use 'networking.k8s.io/v1'
  apiVersion: networking.k8s.io/v1
